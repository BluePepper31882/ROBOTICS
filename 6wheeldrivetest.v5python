{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nLM_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nLM_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nLM = MotorGroup(LM_motor_a, LM_motor_b)\nRM_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nRM_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nRM = MotorGroup(RM_motor_a, RM_motor_b)\nsidemotor = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nmyVariable = 0\n\ndef when_started1():\n    global myVariable\n    sidemotor.set_velocity(85, PERCENT)\n    Lift.set_stopping(HOLD)\n    lift2.set_stopping(HOLD)\n    Lift.set_max_torque(300, PERCENT)\n    lift2.set_max_torque(300, PERCENT)\n    WL.set_position(0, DEGREES)\n    WL.set_stopping(HOLD)\n    WL.set_max_torque(100, PERCENT)\n    puncher.set_velocity(100, PERCENT)\n    puncher.set_stopping(HOLD)\n    while True:\n        LM.set_velocity((controller_1.axis3.position() + controller_1.axis1.position()), PERCENT)\n        RM.set_velocity((controller_1.axis3.position() - controller_1.axis1.position()), PERCENT)\n        sidemotor.set_stopping(BRAKE)\n        LM.spin(FORWARD)\n        RM.spin(FORWARD)\n        if controller_1.buttonR2.pressing():\n            sidemotor.spin(REVERSE)\n        elif controller_1.buttonL2.pressing():\n            sidemotor.spin(FORWARD)\n        else:\n            sidemotor.stop()\n        if controller_1.buttonR1.pressing():\n            Lift.spin(REVERSE)\n            lift2.spin(REVERSE)\n        elif controller_1.buttonL1.pressing():\n            Lift.spin(FORWARD)\n            lift2.spin(FORWARD)\n        else:\n            Lift.stop()\n            lift2.stop()\n        if controller_1.buttonLeft.pressing():\n            WL.spin_to_position(90, DEGREES)\n        elif controller_1.buttonUp.pressing():\n            WL.spin_to_position(0, DEGREES)\n        else:\n            WL.stop()\n        wait(5, MSEC)\n\ndef onevent_controller_1buttonY_pressed_0():\n    global myVariable\n    while not controller_1.buttonB.pressing():\n        puncher.spin(REVERSE)\n        wait(5, MSEC)\n    if controller_1.buttonB.pressing():\n        puncher.stop()\n\n# system event handlers\ncontroller_1.buttonY.pressed(onevent_controller_1buttonY_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1,2],"name":"LM","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[3,4],"name":"RM","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[5],"name":"sidemotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}